from argparse import ArgumentParser as ap
from pwn import *

parser = ap()
parser.add_argument("binary")
subparsers = parser.add_subparsers(dest='subcommand')

local_parser = subparsers.add_parser('l')
debug_parser = subparsers.add_parser('d')
remote_parser = subparsers.add_parser('r')
remote_parser.add_argument("ip", type=str)
remote_parser.add_argument("port", type=int)
args = parser.parse_args()

if args.subcommand == 'l':
    io = process(args.binary)
elif args.subcommand == 'd':
    io = gdb.debug(args.binary, gdbscript='continue')
elif args.subcommand == 'r':
    io = remote(args.ip, args.port)
else:
    raise SystemExit

context.arch = 'amd64'
context.binary = elf = ELF(args.binary)

libc = ELF("glibc/libc.so.6")

rop = ROP([elf, libc])
puts_plt = elf.plt['puts']
puts_got = elf.got['puts']
main = elf.symbols['main']

pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
ret = (rop.find_gadget(['ret']))[0]

io.interactive()


